openapi: 3.1.0
info:
  version: 0.0.1
  title: OpenAPI Sample
  description: |
    # openapi-template

    OpenAPI Sample.
servers:
  - url: https://api.example.com
    description: Production Server
paths:
  /users:
    get:
      operationId: getUsers
      summary: ユーザ一覧の取得
      tags:
        - users
      description: |
        ユーザ一覧を取得する。
      parameters:
        - in: query
          name: ids[]
          description: 絞り込みユーザ ID
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int64
            example:
              - 1
              - 2
              - 3
      responses:
        '200':
          description: 処理成功時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetUsers'
              examples:
                succeeded:
                  value:
                    offset: 0
                    limit: 8
                    count: 100
                    data:
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
        '500':
          description: 処理失敗時
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              examples:
                processingFailed:
                  value:
                    status: 400
                    code: ERROR-001
                    title: エラー
                    detail: エラーが発生しました。
                    instance: /users
    post:
      operationId: postUsers
      summary: 新規ユーザ登録
      tags:
        - users
      description: |
        新規ユーザを登録する。
      requestBody:
        description: 会員情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostUsers'
            examples:
              normal:
                value:
                  email: user@example.org
                  status: member
      responses:
        '200':
          description: 処理成功時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEmpty'
              examples:
                succeeded:
                  value:
                    type: object
        '500':
          description: 処理失敗時
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              examples:
                processingFailed:
                  value:
                    status: 400
                    code: ERROR-001
                    title: エラー
                    detail: エラーが発生しました。
                    instance: /users
  /users/{id}:
    get:
      operationId: getUsersId
      summary: ユーザの取得
      tags:
        - users
      description: |
        ユーザを取得する。
      parameters:
        - in: path
          name: id
          required: true
          description: ユーザ ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 処理成功時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetUsers'
              examples:
                succeeded:
                  value:
                    offset: 0
                    limit: 8
                    count: 100
                    data:
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
                      - id: 1
                        email: user@example.org
                        status: admin
        '500':
          description: 処理失敗時
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              examples:
                processingFailed:
                  value:
                    status: 400
                    code: ERROR-001
                    title: エラー
                    detail: エラーが発生しました。
                    instance: /users
    put:
      operationId: putUsersId
      summary: ユーザ更新
      tags:
        - users
      description: |
        ユーザを更新する。
      requestBody:
        description: 会員情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPutUsersId'
            examples:
              normal:
                value:
                  email: user@example.org
      responses:
        '200':
          description: 処理成功時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEmpty'
              examples:
                succeeded:
                  value: {}
        '500':
          description: 処理失敗時
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              examples:
                processingFailed:
                  value:
                    status: 400
                    code: ERROR-001
                    title: エラー
                    detail: エラーが発生しました。
                    instance: /users
components:
  schemas:
    User:
      type: object
      description: |
        ユーザ。
      required:
        - id
        - email
        - status
      properties:
        id:
          type: integer
          format: int64
          description: ユーザ ID
        email:
          type: string
          format: email
          description: メールアドレス
          x-faker: internet.exampleEmail
        status:
          $ref: '#/components/schemas/EnumStatus'
          description: ユーザ種別
    EnumStatus:
      type: string
      description: |
        ユーザ種別。
      enum:
        - admin
        - member
        - guest
    RequestPostUsers:
      type: object
      required:
        - email
        - status
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
          x-faker: internet.exampleEmail
        status:
          $ref: '#/components/schemas/EnumStatus'
          description: ユーザ種別
    RequestPutUserId:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
          x-faker: internet.exampleEmail
    ResponseError:
      type: object
      required:
        - status
        - code
        - title
        - instance
      properties:
        status:
          type: number
          description: HTTP ステータスコード
        code:
          type: string
          description: エラーコード
        title:
          type: string
          description: エラータイトル
        detail:
          type: string
          description: エラー詳細
        instance:
          type: string
          description: エンドポイント
        options:
          type: object
          description: 付加情報
    ResponseGetUsers:
      type: object
      required:
        - offset
        - limit
        - count
        - data
      properties:
        offset:
          type: integer
          description: 取得開始位置
        limit:
          type: integer
          description: 取得件数
        count:
          type: integer
          description: 総件数
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    ResponseGetUsersId:
      $ref: '#/components/schemas/User'
    ResponseEmpty:
      type: object
    RequestPutUsersId:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
          x-faker: internet.exampleEmail
